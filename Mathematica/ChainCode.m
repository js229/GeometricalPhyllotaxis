(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
SetOptions[EvaluationNotebook[],AutoGeneratedPackage->Automatic];



(* ::Input::Initialization:: *)

diskZ[Disk[{_,z_},_]] := z;
diskX[Disk[{x_,_},_]] := x;
diskXZ[Disk[{x_,z_},_]] := {x,z};
diskRightX[Disk[{x_,_},r_]] := x+r;
diskLeftX[Disk[{x_,_},r_]] := x-r;


moveNumberRight[n_] := right[n];
moveNumberRight[left[n_]] := n;
moveNumberLeft[n_] := left[n];
moveNumberLeft[right[n_]] := n;
leftAndRightNumbers[n_List] := Join@@{n,moveNumberRight/@n,moveNumberLeft/@n};
bareNumber[left[n_]]  := n;
bareNumber[right[n_]] := n;
bareNumber[n_] := n;


moveDiskRight[Disk[{x_,z_},r_]] :=
Disk[{x+1,z},r];
moveDiskLeft[Disk[{x_,z_},r_]] :=
Disk[{x-1,z},r];
moveNumberedDiskRight[n_->d_] := moveNumberRight[n]->moveDiskRight[d];
moveNumberedDiskLeft[n_->d_] := moveNumberLeft[n]->moveDiskLeft[d];


getDisk[n_,run_] := If[KeyExistsQ[run["CurrentDisks"],n],run["CurrentDisks"][n]
,Missing[StringTemplate["No disk ``"][{n}]]];
getDisk[right[n_],run_] := moveDiskRight[getDisk[n,run]];
getDisk[left[n_],run_] := moveDiskLeft[getDisk[n,run]];

diskIsLeft[Disk[{x_,z_},r_]] :=x<-1/2
diskIsRight[Disk[{x_,z_},r_]] :=x>1/2
diskIsNormalised[d_] := (! diskIsLeft[d]) && (! diskIsRight[d]);

diskAndVisibleCopies[Disk[{x_,z_},r_]] := {Disk[{x,z},r],If[x+r>1/2,moveDiskLeft[Disk[{x,z},r]],Nothing[]],If[x-r<-1/2,moveDiskRight[Disk[{x,z},r]],Nothing[]]};

nextRadius[run_] := Module[{highestZ},
highestZ=Max@Map[diskZ,Values@run["CurrentDisks"]];
run["Arena"]["rFunction"][highestZ]
];
nextDiskNumber[run_] := Max@Keys[run["CurrentDisks"]]+1;


(* ::Input::Initialization:: *)
currentSupportDisks[run_,nextR_] :=  Module[{chain,lefts,rights},
chain = VertexList@Last@run["CompletedChainGraphs"];
chain = Join[chain,run["CurrentChain"]];
chain = SortBy[chain,diskX[getDisk[#,run]]&];
lefts = Map[moveNumberedDiskLeft[#->getDisk[#,run]]&,chain];
lefts = First /@ Select[lefts,diskRightX[Last[#]]+nextR>= -1/2 &];
rights =  Map[moveNumberedDiskRight[#->getDisk[#,run]]&,chain];
rights =First /@ Select[rights,diskLeftX[Last[#]]-nextR<= 1/2 &];
DeleteDuplicates@Join[lefts,chain,rights]
]

diskPairCanSupport[run_,nextR_,n1_,n2_] := 
diskRightX[getDisk[n1,run]] + 2 * nextR <= diskRightX[getDisk[n2,run]] 



(* ::Input::Initialization:: *)
potentialHorizontalOverlaps[run_,nextR_] := Module[{supportDisks,supportPairs,can},
supportDisks = currentSupportDisks[run,nextR];
(*Print["support disks: ",supportDisks];
*)supportPairs = {};
For[i=1,i< Length[supportDisks],i++,
For[j=i+1,j<= Length[supportDisks],j++,
can = diskPairCanSupport[run,nextR,supportDisks[[i]],supportDisks[[j]]];
(*Print["i,j",{i,j}, " ",can]*);
If[can,
supportPairs = Append[supportPairs,{supportDisks[[i]],supportDisks[[j]]}]
]
]
];
(*dPrint["Horizontal Support pairs: ",supportPairs];*)
supportPairs

];

disksWithinHorizontalRight[run_,extendedDisks_,n_,nextR_] := Module[{rhs,rightPossible},
rhs = diskRightX[run["CurrentDisks"][n]];

Keys@Association@Select[Normal[extendedDisks], diskRightX[Last[#]]> rhs && diskLeftX[Last[#]]<rhs + 2 * nextR&]

];

extendDisksRight[run_,nextR_] := Module[
{extendedDisks,extendedDisksRight},
extendedDisks= run["CurrentDisks"];
extendedDisksRight = 
Select[extendedDisks,diskLeftX[#]+1 - nextR >=1/2 &];
extendedDisksRight = Association[Map[moveNumberedDiskRight,Normal[extendedDisksRight]]];
extendedDisks

];
extendDisksLeft[run_,nextR_] := Module[
{extendedDisks,extendedDisksLeft},
extendedDisks= run["CurrentDisks"];
(*dPrint["eDL candidates: ",extendedDisks];
dPrint["nextR: ",nextR];
*)
extendedDisksLeft = Select[extendedDisks,diskRightX[#]-1 + nextR >=- 1/2 &];
extendedDisksLeft = Association[Map[moveNumberedDiskLeft,Normal[extendedDisksLeft]]];
(*dPrint["eDL left: ",extendedDisks];*)extendedDisksLeft

];
extendDisksLeftRight[run_,nextR_]:= Module[{extendedDisks},
extendedDisks = 
Append[run["CurrentDisks"], extendDisksRight[run,nextR]];
extendedDisks = 
Append[extendedDisks, extendDisksLeft[run,nextR]];
extendedDisks 
];


(* ::Input::Initialization:: *)
initializeCurrentOverlaps[run_] := Module[{nextR,res},
nextR= nextRadius[run];

possibleOverlaps = potentialHorizontalOverlaps[run,nextR];
possibleOverlaps = Complement[possibleOverlaps,run["UsedOverlaps"]];
res=run;
res["CurrentOverlaps"]= possibleOverlaps;
res
];

setGraphCoordinates[run_] := Module[{res,g,nxy},
res = run;
g= res["ContactGraph"];
nxy[n_] := diskXZ@getDisk[n,res];
g = Graph[g,VertexCoordinates->Map[#->nxy[#]&,VertexList[g]]];
g = Graph[g,PlotTheme->"Labeled"];
res["ContactGraph"]=g;
res
];


(* ::Input::Initialization:: *)
completeChain[run_] := Module[{res,i,complete=False},
res = run;

res = initializeCurrentOverlaps[res];
debug:= (nextDiskNumber[res]==7);

For[i=1,i<= 10,i++,
(*dPrint["Next disk: ",nextDiskNumber[res]];
*)
res= addNextDisk[res];
(*dPrint[" radius was: ",nextRadius[run]];
*)
res = initializeCurrentOverlaps[res];
complete = currentChainIsComplete[res];
If[complete,Print["Completed chain",res["CurrentChainGraph"]]];
If[complete,Break[]];
];
If[!complete,
Print[StringTemplate["chain incomplete after `` iterations"][i]];
Abort[];
];



res = setUpNewChain[res];
res
];

setUpNewChain[run_] := Module[{res,chainNumber,completedChain},
res = run;
res["PastDisks"]= Append[res["PastDisks"],res["CurrentDisks"]];


chainNumber = Max[Keys[res["CompletedChainGraphs"]]]+1;
res["CompletedChainGraphs"]= Append[res["CompletedChainGraphs"],
chainNumber->res["CurrentChainGraph"]];

res["CurrentDisks"]= KeyTake[
res["CurrentDisks"],res["CurrentChain"]];
res["CurrentChain"] = {};
res["CurrentChainGraph"] = Graph[{}];
res["CurrentOverlaps"] = {};


res

]


(* ::Input::Initialization:: *)
currentChainIsComplete[run_] := Module[{nodeList,lrNodes,lrNodesAndCentral},
If[!ConnectedGraphQ[res["CurrentChainGraph"]],Return[False]];

nodeList = VertexList@res["CurrentChainGraph"];
lrNodes = Cases[nodeList,left[_] | right[_]];
lrNodesAndCentral = Or@@Map[MemberQ[nodeList,bareNumber[#]]&,lrNodes];

Return[lrNodesAndCentral];
];
(*
Print["chain: ",res["CurrentChainGraph"]];
lhs = First[run["CurrentChain"]];
rhs = Last[run["CurrentChain"]];
MemberQ[edgeList,(rhs \[UndirectedEdge] right[lhs])] || MemberQ[edgeList,
( right[lhs] \[UndirectedEdge] rhs)]*)



(* ::Input::Initialization:: *)

addNextDisk[run_] := Module[{next,path,n,g},

next=findNextNormalizedDisk[run];
n= nextDiskNumber[run];
res= run;
res["CurrentDisks"] = Append[res["CurrentDisks"],n->next["Disk"]];

res["CurrentChain"] = Append[res["CurrentChain"],n];
res["CurrentChain"] = SortBy[res["CurrentChain"] ,diskX[getDisk[#,res]]&];

removeList = {next["RestsOn"] ,Reverse@next["RestsOn"],
moveNumberLeft/@next["RestsOn"],
moveNumberLeft/@ (Reverse@next["RestsOn"])
};
res["UsedOverlaps"] = Join[res["UsedOverlaps"],removeList];

g = res["ContactGraph"];

g = VertexAdd[g,n,VertexCoordinates->{n->diskXZ[n]}];

g= EdgeAdd[g,
{next["RestsOn"][[1]] \[UndirectedEdge] n,
n \[UndirectedEdge] next["RestsOn"][[2]] }];

res["ContactGraph"]=g;
res = setGraphCoordinates[res];
res["CurrentChainGraph"] = Subgraph[g,leftAndRightNumbers@res["CurrentChain"]];

res =initializeCurrentOverlaps[res];


res
];

findNextNormalizedDisk[run_] := Module[{res},
res= findNextDisk[run];
If[diskIsLeft[res["Disk"]],
res["Disk"]=moveDiskRight[res["Disk"]];
res["RestsOn"]= Map[moveNumberRight,res["RestsOn"]]
];

If[diskIsRight[res["Disk"]],
res["Disk"]=moveDiskLeft[res["Disk"]];
res["RestsOn"]= Map[moveNumberLeft,res["RestsOn"]]
];

Print["Adding ",nextDiskNumber[run], ": ",res];

res

];

findNextDisk[run_] := Module[{nextR,locations,nextPair,nextDisk},
nextR= N@nextRadius[run];

locations = DeleteMissing@Association@Map[#->overlapLocations[#,nextR,run]&,run["CurrentOverlaps"]];
locations = DeleteMissing[locations];
locations = Select[locations,diskX[#]>=-1/2 && diskX[#]<=1/2 &];
locations = SortBy[locations,diskZ];
locations = deleteIntersectingDisks[run,locations,nextR];

locations= List@@First@Normal@locations;
{nextPair,nextDisk}=locations;
Return[<|"Disk"->nextDisk,"RestsOn"->nextPair|>]
];

dPrint[x__] := If[debug, Print[x]];

deleteIntersectingDisks[run_,locations_,nextR_] := Module[{extendedDisks,res},


(*Print["Locations",locations];
*)
(*dPrint["eDL: ",extendDisksLeft[run,nextR]];
*)
extendedDisks = extendDisksLeftRight[run, nextR];

locationIntersectsQ[d_] := 
Module[{vals},
vals = Map[diskdiskIntersectionQ[d,#]&,extendedDisks];
 vals
];

(*If[debug,Print["debug"];
dx = KeyTake[locations,{{left[4],3}}];
Print[dx];
dy = extendedDisks;
Print["Extended disks: ",dy];
Print["DDI",diskdiskIntersectionQ[First@dx,First@dy]];
];*)

(*dPrint[Map[locationIntersectsQ[#]&,locations]];
*)res = Select[locations,Not[Apply[Or,Values@locationIntersectsQ[#]]]&];

res
];

diskdiskIntersectionQ[Disk[xy1_,r1_],Disk[xy2_,r2_]]:= Norm[xy1-xy2,2] < (r1+ r2);

overlapLocations[{n1_,n2_},r_,run_] := Module[{res},
res = diskdiskUpperTouchingPoint[{getDisk[n1,run],getDisk[n2,run]},r];
If[MissingQ[res],Return[res]];
Disk[res,r]
];



(* ::Input::Initialization:: *)
(* for some ics, couldn't guarantee the lower one is discardable,
but should be provided pattern is a dropped coin one *)
diskdiskUpperTouchingPoint[pairDisks_,r_] := Module[
{lrPoints},
lrPoints= diskdiskTouchingPoint[pairDisks,r];
If[MissingQ[lrPoints],Return[lrPoints]];
Last[SortBy[lrPoints,N@Last[#]&]]
];

diskdiskTouchingPoint[pairDisks_,r_] := Module[{xy1,xy2,r1,r2,interdisk,sTriangle,triangle
,rTrianglePT,lTrianglePT,transform},
{{xy1,r1},{xy2,r2}}= List@@@ pairDisks;
interdisk = Norm[xy1-xy2];
If[interdisk > (r1+r) +( r2 + r),
Return[Missing["interdisk too large"]]];
(* if we knew r was decreasing could filter out this disk at this point *)

Off[SSSTriangle::tri];
sTriangle =SSSTriangle[r+r2,r+r1,interdisk];
On[SSSTriangle::tri];
If[Head[sTriangle]===SSSTriangle,
Return[Missing["not a triangle"]]
(*Abort[];*)
];
triangle = (List@sTriangle)[[1,1]];
transform =Composition[TranslationTransform[xy1],RotationTransform[{triangle[[2]]-triangle[[1]],xy2-xy1}]
];
rTrianglePT = (transform[triangle])[[3]];
lTrianglePT = (ReflectionTransform[RotationTransform[90 Degree][xy2-xy1],xy1])[rTrianglePT];
{rTrianglePT,lTrianglePT}
];

