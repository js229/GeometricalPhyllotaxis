(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
SetOptions[EvaluationNotebook[],AutoGeneratedPackage->Automatic];



(* ::Input::Initialization:: *)

diskZ[Disk[{_,z_},_]] := z;
diskX[Disk[{x_,_},_]] := x;
diskXZ[Disk[{x_,z_},_]] := {x,z};
diskRightX[Disk[{x_,_},r_]] := x+r;
diskLeftX[Disk[{x_,_},r_]] := x-r;



moveDiskRight[Disk[{x_,z_},r_]] :=
Disk[{x+1,z},r];
moveDiskLeft[Disk[{x_,z_},r_]] :=
Disk[{x-1,z},r];

getDisk[n_,run_] := run["CurrentDisks"][n];
getDisk[right[n_],run_] := moveDiskRight[getDisk[n,run]];



diskAndVisibleCopies[Disk[{x_,z_},r_]] := {Disk[{x,z},r],If[x+r>1/2,moveDiskLeft[Disk[{x,z},r]],Nothing[]],If[x-r<-1/2,moveDiskRight[Disk[{x,z},r]],Nothing[]]};

nextRadius[run_] := Module[{highestZ},
highestZ=Max@Map[diskZ,Values@run["CurrentDisks"]];
run["Arena"]["rFunction"][highestZ]
];
nextDiskNumber[run_] := Max@Keys[run["CurrentDisks"]]+1;

initializeChainRun[run_] := Module[{nextR,extendedDisks,res},
extendedDisks= run["CurrentDisks"];
nextR= nextRadius[run];

disksMightOverlap = Select[extendedDisks,diskX[#]+1<= 1/2+nextR &];
disksMightOverlap = Join[Normal@extendedDisks,
KeyValueMap[right[#1]-> moveDiskRight[#2]&,disksMightOverlap]];

rightPossible[ n_-> d_Disk] := Module[{f},
f[x_] := diskX[x[[2]]]>diskX[d] &&
diskRightX[d]+2*nextR >= diskLeftX[x[[2]]];
Map[{n,First[#]}&,Select[ disksMightOverlap,f]]
];
possibleOverlaps = Flatten[Map[rightPossible,disksMightOverlap],1];
res=run;
res["CurrentOverlaps"]= possibleOverlaps;
res
];

setGraphCoordinates[run_] := Module[{res,g,nxy},
res = run;
g= res["ContactGraph"];
nxy[n_] := diskXZ@getDisk[n,res];
g = Graph[g,VertexCoordinates->Map[#->nxy[#]&,VertexList[g]]];
g = Graph[g,PlotTheme->"Labeled"];
res["ContactGraph"]=g;
res
];


addNextDisk[run_] := Module[{next,path,n,g},
next=findNextDisk[run];
n= nextDiskNumber[run];
res= run;
res["CurrentDisks"] = Append[res["CurrentDisks"],n->next["Disk"]];
res["ActiveDisks"] = Append[res["ActiveDisks"],n];


res["CurrentChain"] = Append[res["CurrentChain"],n];
res["CurrentChain"] = SortBy[res["CurrentChain"] ,diskX[getDisk[#,res]]&];


g = res["ContactGraph"];

path= FindShortestPath[g,next["RestsOn"][[1]],next["RestsOn"][[2]]];
pathPairs = Partition[path,2,1];


g =  EdgeDelete[g,UndirectedEdge@@@pathPairs];
g= EdgeAdd[g,
{next["RestsOn"][[1]] \[UndirectedEdge] n,
n \[UndirectedEdge] next["RestsOn"][[2]] }];

res["ContactGraph"]=g;
res = setGraphCoordinates[res];

res["CurrentOverlaps"] = Select[
res["CurrentOverlaps"],
Not[ MemberQ[path,First[#]]&& MemberQ[path,Last[#]] ]&];
res["CurrentOverlaps"]= Join[
res["CurrentOverlaps"],
{{next["RestsOn"][[1]],n},
{n,next["RestsOn"][[2]]}}];

res
];

findNextDisk[run_] := Module[{nextR,locations,nextPair,nextCentre},
nextR= N@nextRadius[run];

locations = Association@Map[#->overlapLocations[#,nextR,run]&,run["CurrentOverlaps"]];
locations = DeleteMissing[locations];
locations= List@@First@Normal@Sort@locations;
{nextPair,nextCentre}=locations;
Return[<|"Disk"->Disk[nextCentre,nextR],"RestsOn"->nextPair|>]
]

overlapLocations[{n1_,n2_},r_,run_] := Module[{},
diskdiskUpperTouchingPoint[{getDisk[n1,run],getDisk[n2,run]},r]
];



(* ::Input::Initialization:: *)
(* for some ics, couldn't guarantee the lower one is discardable,
but should be provided pattern is a dropped coin one *)
diskdiskUpperTouchingPoint[pairDisks_,r_] := Module[
{lrPoints},
lrPoints= diskdisktouchingPoint[pairDisks,r];
If[MissingQ[lrPoints],Return[lrPoints]];
Last[SortBy[lrPoints,N@Last[#]&]]
];

diskdisktouchingPoint[pairDisks_,r_] := Module[{xy1,xy2,r1,r2,interdisk,sTriangle,triangle
,rTrianglePT,lTrianglePT,transform},
{{xy1,r1},{xy2,r2}}= List@@@ pairDisks;
interdisk = Norm[xy1-xy2];
If[interdisk > (r1+r) +( r2 + r),Return[Missing[]]];
Off[SSSTriangle::tri];
sTriangle =SSSTriangle[r+r2,r+r1,interdisk];
On[SSSTriangle::tri];
If[Head[sTriangle]===SSSTriangle,
Return[Missing[]]
(*Abort[];*)
];
triangle = (List@sTriangle)[[1,1]];
transform =Composition[TranslationTransform[xy1],RotationTransform[{triangle[[2]]-triangle[[1]],xy2-xy1}]
];
rTrianglePT = (transform[triangle])[[3]];
lTrianglePT = (ReflectionTransform[RotationTransform[90 Degree][xy2-xy1],xy1])[rTrianglePT];
{rTrianglePT,lTrianglePT}
];

