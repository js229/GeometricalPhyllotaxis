(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
SetDirectory[NotebookDirectory[]];Get["RunCoinStackingCode.m",Path->{PersistentSymbol["persistentGitHubPath","Local"]}]
Get["CoinStackingCode.m",Path->{PersistentSymbol["persistentGitHubPath","Local"]}]
Get["LatticePhyllotaxis.m",Path->{PersistentSymbol["persistentGitHubPath","Local"]}];



(* ::Input::Initialization:: *)





(* ::Input::Initialization:: *)
(* rest of code in Transtions..nb *) 
showRun[run_] := Module[{disks,chains,ffs,cylinder,contacts},
ffs= Directive[FaceForm[White],EdgeForm[None]];
disks =Union[run["PastDisks"],run["CurrentDisks"]];

contacts = graphToContactLines[run];
chains = Map[lineChain[#,run]&,Keys[run["CompletedChainGraphs"]]];
cylinder = {LightGreen,Rectangle[{-1/2,run["Arena"]["CylinderLU"][[1]]},{1/2,run["Arena"]["CylinderLU"][[2]]}]};

Graphics[{
cylinder
,{ffs,Map[diskAndVisibleCopies,Values@disks]}

(*,{Black,chains}
*)
,{contacts}
,KeyValueMap[Text[#1,#2[[1]]]&,disks]
}
,Axes->False
]
];
graphToContactLines[run_] := Module[{g,lines,res,cols},
g = run["ContactGraph"];
lines = Line/@Map[diskXZ[getDisk[#,run]]&,List@@@EdgeList[g],{2}];
res = lineCylinderIntersectionColoured/@lines;
res
];
lineCylinderIntersectionColoured[Line[{{x1_,z1_},{x2_,z2_}}]] := Module[{slope,col},
slope= (z2-z1)/(x2-x1);
If[slope>0,col=Red,col=Blue];
If[x1<-1/2,
Return[{col,Line[{{-1/2, z2 - slope * (x2-(-1/2))},{x2,z2}}]
, Line[{{x1+1,z1},{1/2,z1+slope *( 1/2-(1+x1))}}]
}]];
If[x2>1/2,
Return[{col,Line[{{-1/2, z2- slope * (x2-1-(-1/2))},{x2-1,z2}}]
, Line[{{x1,z1},{1/2,z1+slope *( 1/2-(x1))}}]
}]];
Return[{col,Line[{{x1,z1},{x2,z2}}]}] 
];





